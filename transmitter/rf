#!/usr/bin/python3
# Copyright 2018 Alexander Wilhelmi
# This file is part of 433control.
# 
# 433control is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# 433control is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with 433control.  If not, see <http://www.gnu.org/licenses/>.
# 

SERIAL_WAIT_READY=1.8
SERIAL_BAUDRATE=500000

from os.path import exists

if exists ('/etc/has433rf'):
    pass
else:
    from subprocess import call
    from sys import argv
    call(["ssh","ec"]+argv)
    from sys import exit
    exit()



intbytes=2
maxintsize=2**(intbytes*8)
byteorder="little"
port='/dev/ttyACM0'
codedir="/usr/share/433control"
codes={    "1_1_0"   :    "remote1_btn1_off"    ,
           "1_1_1"   :    "remote1_btn1_on"     ,
           "1_2_0"   :    "remote1_btn2_off"    ,
           "1_2_1"   :    "remote1_btn2_on"     ,
           "1_3_0"   :    "remote1_btn3_off"    ,
           "1_3_1"   :    "remote1_btn3_on"     ,
           "1_4_0"   :    "remote1_btn4_off"    ,
           "1_4_1"   :    "remote1_btn4_on"     ,
           "1_a_0"   :    "remote1_btnall_off"  ,
           "1_a_1"   :    "remote1_btnall_on"   ,  
           "2_1_0"   :    "remote2_btn1_off"    ,
           "2_1_1"   :    "remote2_btn1_on"     ,
           "2_2_0"   :    "remote2_btn2_off"    ,
           "2_2_1"   :    "remote2_btn2_on"     ,
           "2_3_0"   :    "remote2_btn3_off"    ,
           "2_3_1"   :    "remote2_btn3_on"     ,
           "2_4_0"   :    "remote2_btn4_off"    ,
           "2_4_1"   :    "remote2_btn4_on"     ,
           "2_a_0"   :    "remote2_btnall_off"  ,
           "2_a_1"   :    "remote2_btnall_on"      }

def decode_args(argv):
    args = argv[1]
    for i in range(2,len(argv)):
        args = args + argv[i]
        args = args.strip()
        args = args.replace(" ","")
    if len(args) == 3:
        return args
    else:
        raise Exception("did not understand args")

from sys import exit,argv
fname=None
for i in argv:
    if i=='-l':
        print("controlable things:")
        print()
        print("11 : light")
        print("12 : room ventilation fan")
        print("13 : room audio")
        print("14 : intense light")
        print()
        print("21 : wifi/ethernet bridge")
        print("22 : led stripe ilumination")
        print("23 : forgot")
        print("24 : air conditioner")
        print()
        exit(0)
    elif i=='-f':
        j=argv.index("-f")
        if len(argv[j]) > 1:
            fname=argv[j+1]


import serial
s = serial.Serial(port=port, baudrate=SERIAL_BAUDRATE,timeout=0)

from time import sleep
print("waiting "+str(SERIAL_WAIT_READY)+" sec for the serial to get ready... ",end="")
sleep(1.8)
print("done")
txt=s.read_all().decode(errors="replace").strip()
if len(txt)>0:
    print(txt)


if fname is None:
    args = decode_args(argv)
    fname=codedir+'/'+codes[args[0]+'_'+args[1]+'_'+args[2]]

##print("code = "+fname.split("/")[-1])
f=open(fname,'rt')
data=f.read().strip()
f.close()
liste=data.split(" ")
liste=[0x0000,0x0000,0x0000,0xFFFF]+liste
liste.append(0)
#print("length: "+ str(len(liste)))
#print(liste)
for i in liste:
    a=int(i)
    if a > maxintsize - 1:
            raise Exception("value to large")
    z=a.to_bytes(intbytes,byteorder,signed=False)
    z0=z[0].to_bytes(1,byteorder,signed=False)
    z1=z[1].to_bytes(1,byteorder,signed=False)
    s.write(z1)
    s.write(z0)
    s.flush()

txt=s.read_all().decode(errors="replace").strip()
if len(txt)>0:
    print(txt)

s.close()
